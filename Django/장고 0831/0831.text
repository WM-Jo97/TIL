Django model
    장고는 웹 애플리케이션의 데이터를 구조화하고 조작하기 위한 추상적인 계층을 제공
   
Database
    체계화된 데이터의 모임
    검색 및 구조화 같은 작업을 보다 쉽게 하기 위해
    조직화된 데이터를 수집하는 저장 시스템

1. 스키마
2. 테이블

1. 스키마
    -> 뼈대 (Structure)
    데이터베이스에서 자료의 구조, 표현방법, 관계 등을 정의한 구조

2. 테이블 
    -> 필드와 레코드를 사용해 조직된 데이터 요소들의 집합
    관계(Relation) 라고도 부름

    1. 필드(field)
        -> 속성, 컬럼

    2. 레코드(record)
        -> 튜플, 행

    PK (Primary Key)
        기본 키 
        각 레코드의 고유한 값(식별자로 사용)
        기술적으로 다른 항목과 절대로 중복될 수 없는 단일 값(unique)
        데이터베이스 관리 및 테이블 간 관계 설정 시 주요하게 활용됨

    쿼리 (Query)
        데이터를 조회하기 위한 명령어를 일컬음
        조건에 맞는 데이터를 추출하거나 조작하는 명령어
        (주로 테이블형 자료 구조)
        Query를 날린다 = 데이터 베이스를 조작한다.


MODEL 
    장고는 모델을 통해 데이터에 접속하고 관리
    단일한 데이터에 대한 정보를 가짐
    사용자가 저장하는 데이터들의 필수적인 필드들과 동작들을 포함
    저장된 데이터베이스의 구조
    일반적으로 각각의 모델은 하나의 데이터베이스 테이블에 매핑 
        *맵핑 : 하나의 값을 다른 값에 대응시키는 것
        (모뎉 클래스 1개 == 데이터베이스 테이블 1개)

    각 모델은 django.models.Model 클래스의 서브 클래스로 표현됨
    즉, 각 모델은 django.db.models 모듈의 Model 클래스를 상속받아 구성됨
    클래스 상속 기반 형태의 Django 프레임워크 개발

CharField(max_length = None, **options)
    길이의 제한이 있는 문자열을 넣을 때 사용
    max_length
        필드의 최대 길이(문자)
        CharField의 필수 인자
        데이터베이스와 Django의 유효성 검사 (값을 검증하는 것)에서 활용

TextField (**options)
    글자의 수가 많을 때 사용
    max_length 옵션 작성 시 사용자 입력 단계에서는 반영되지만
    모델과 데이터베이스 단계에서는 적용되지 않음 (CharField를 사용해야함)
        실제로 저장될 때 길이에 대한 유효성을 검증하지 않음

Migrations (python manage.py makemigration)
=> 실제 설계도 

migrate
    makemigration로 만든 설계도를 실제 데이터베이스에 반영하는 과정
    (db.sqlite3 파일에)

DateTimeField()
---> *** auto_now_add
        최초 생성 일자
        Django ORM이 최초 insert 시에만
        현재 날짜와 시간으로 갱신

    *** auto_now
        최종 수정 일자
        Django ORM이 save를 할 때마다 현재 날짜와 시간으로 갱신

ORM 
    Object - Relational - Mapping
    객체 지향 프로그래밍 언어를 사용하여 호환되지 않는 유형의 시스템 간에
    (Django <-> DB) 데이터를 변환하는 프로그래밍 기술

    객체 지향 프로그래밍에서 데이터베이스을 연동할 때, 데이터베이스와
    객체지향 프로그래밍 언어 간의 호환되지 않는 데이터를 변환한느 프로그래밍 기법
    (Django는 내장 Django ORM 을 사용)

    장점 : SQL을 잘 알지 못해도 객체지향 언어로 DB 조작이 가능
           객체 지향적 접근으로 인한 높은 생산성

    단점 : ORM 만으로 완전한 서비스를 구현하기 어려운 경우가 있음

    IPython - 파이썬 기본 쉘보다 더 강력한 파이썬 쉘
              django-extensions
    django-extensions - Django 확장 프로그램 모음
                        shell_plus, graph model 등 다양한 확장 기능 제공

objects manager
    Django 모델이 데이터베이스 쿼리 작업을 가능하게 하는 인터페이스
    Djangosms 기본적으로 모든 Django 모델 클래스에 대해 objects라는
    Manager 객체를 자동으로 추가함

    이 Manager(objects)를 통해 특정 데이터를 조작(매서드) 할 수 있음
    "DB를 python class로 조작할 수 있도록 여러 메서드를 제공하는 manager)

Query
    데이터베이스에 특정한 데이터를 보여달라는 요청
        쿼리문을 작성한다 - > 원하는 데이터를 얻기 위해 데이터베이스에 요청을 보낼 코드를 작성

QuerySet
    데이터베이스에게서 전달받은 객체 목록(데이터 모음)
        순회가 가능한 데이터로써 1개 이상의 데이터를 불러와 사용할 수 있음
    Django ORM을 통해 만들어진 자료형이며, 필터를 걸거나 정렬등을 수행할 수 있음

QuerySet API




Read 
    Get() --> 단일 데이터 조회
    *객체를 찾을 수 없으면 에러
    *객체가 2개 이상이면 에러
    위 두가지에 의해 (*pk를 불러올 때 사용)

    filer() --> Queryset으로 반환
    *없거나 1개여도 Queryset으로 반환