Framework
-> 누군가 만들어 놓은 코드를 재사용하는것이 익숙한 개발문화
    '웹 서비스'도 누군가 개발해 놓은 코드를 재사용하는것
    즉, 서비스 개발에 필요한 기능들을 미리 구현해서 모아 놓은 것
    == 프레임 워크

Django 
    1) 파이썬 기반의 프레임워크 
    2) 수많은 여러 유용한 기능들
    3) 검증된 웹 프레임워크
        유명 서비스들이 사용 => 안정적인 서비스 가능

클라이언트 <-> 서버 구조
    오늘날 우리가 사용하는 대부분의 웹 서비스는 클라이언트-서버 구조 사용

    클라이언트 --> 요청 --> 서버
    클라이언트 <-- 반응 <-- 서버

    사용자의 요청부터 흐름을 잡아가면 됨.

클라이언트 
    - 웹 사용자의 인터넷에 연결된 장치
    - Chrome ,Firefox 등과 같은 웹 브라우저
    - 서비스를 요청하는 주체

서버
    - 웹 페이지, 사이트 또는 앱을 저장하는 컴퓨터
    - 클라이언트가 웹페이지에 접근하려고 할 때 서버에서 클라이언트 컴퓨터로
      웹 페이지 데이터를 응답해 사용자의 웹 브라우저에 표시됨
    - 요청에 대해 서비스를 응답하는 주체

웹 브라우저
    -> 웹에서 페이지를 찾아 보여주고, 사용자가 하이퍼링크를 통해 다른 페이지로
        이동할 수 있도록 하는 프로그램
    - 웹 페이지 파일을 우리가 보는 화면으로 바꿔주는 (랜더링 ) 프로그램

웹 페이지
    -> 웹에 있는 문서
        우리가 보는 화면 각각 한장 한 장이 웹 페이지
    -> 웹 페이지 종류
        1. 정적 웹 페이지
        2. 동적 웹 페이지

정적 웹 페이지
    Static Web page
    있는 그대로르 제공하는 것 (served as - is)
    우리가 지금까지 작성한 웹 페이지이며 한번 작성된 HTML 파일의 내용이 변하지 않고
    모든 사용자에게 동일한 모습으로 전달되는 것
        --> 서버에 미리 저장된 HTML 파일 그대로 전달된 웹 페이지
            같은 상황에서 모든 사용자에게 동일한 정보를 표시됨

동적 웹 페이지
    Dynamic Web page
    
    사용자의 요청에 따라 웹 페이지에 추가적인 수정이 되어 클라이언트에게 전달되는 웹 페이지

    웹 페이지의 내용을 바꿔주는 주체 == 서버
    -> 서버에서 동작하고 있는 프로그램이 웹 페이지를 변경해줌
       이렇게 사용자의 요청을 받아서 적절한 응답을 만들어주는 프로그램을
       쉡게 만들 수 있께 도와주는 것 -> 프레임워크

Design Pattern == 공법
    각기 다른 기능을 가진 다양한 응용 소프트웨어를 개발할 때 공통적인 설계 문제가 존재
    이를 처리하는 해결책 사이에도 공통점이 있다는 사실 발견

    이러한 유사점을 패턴이라 함.

소프트웨어 디자인 패턴의 목적
    특정 문맥에서 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책을 제시
    프로그래머가 어플리케이션이나 시스템을 디자인할 때 발생하는 공통적 문제를
    해결하는데 형식화 된 가장 좋은 관행

    장점 : 다수의 엔지니어들이 일반화된 패턴으로 소프트웨어 개발을 할 수 있도록 한 규칙
           커뮤니케이션의 효율성을 높이는 기법

Django 에서의 디자인 패턴
    MTV 패턴 (MVC 패턴의 변형)
    
    MVC 는 MODEL - VIEW - CONTROLLER 의 준말
    데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴
    하나의 큰 프로그램을 세가지 역할로 구분한 개발 방법론

    1. Model = 데이터와 관련된 로직을 관리
    2. View = 레이아웃과 화면을 처리
    3. Controller = 명령을 model과 view 부분으로 연결

    MVC 소프트웨어 디자인 패턴의 목적
    -> 관심사 분리
    -> 더 나은 업무의 분리와 향샹된 관리를 제공
    -> 각 부분을 독립적으로 개발할 수 있어 하나를 수정하고 싶을때
        전체를 수정하지 않아도 됨
        (개발 효율성 및 유지보소 용이)
        (다수의 멤버로 개발하기 용이)


장고에서는 MVC 를 기반으로 한 MTV 패턴을 사용
두 패턴은 서로 크게 다른점은 없으며 일부 역할에 대해 부르는 이름이 다름

MTV = 
    MODEL
    TEMPLATE
    VIEW


MTV 디자인 패턴
    MODEL
        MVC 패턴에서의 MODEL에 해당
        데이터와 관련된 로직을 관리
        응용 프로그램의 데이터 구조를 정의하고 데이터베이스의 기록을 관리
    
    TEMPLATE (서식 문서)
        레이아웃과 화면을 처리
        화면상의 사용자 인터페이스 구조와 레이아웃을 정의
        MVC 패턴에서 VIEW 역할에 해당

    VIEW  <<-- VIEW 가 메인  
        MODEL & TEMPLATE과 관련된 로직을 처리해서 응답을 반환
        클라이언트의 요청에 대해 처리를 분기하는 역할
        동작 예시
         -데이터가 필요하다면 mode에 접근해서 데이터를 가져오고
          가져온 데이터를 TEMPLATE으로 보내 화면을 구성
          구성된 화면을 응답으로 만들어 클라이언트에게 반환

        MVC 패턴에서 CONTROLLER의 역할에 해당

    MODEL --> VIEW --> TEMPLATE
    MODEL <-- VIEW <-- TEMPLATE

Django 흐름

1. HTTP Request  (사용자가 요청)
2. URLS (urls.py)  <- URL 분석 (어떤 요청인지 확인)
3. VIEW (views.py) (요청 처리)
4. MODEL (models.py) (필요한 data 요청)
5. MODEL -> VIEW (data 전달)
6. Data TEMPLATE 
7. HTTP Response (응답)

요청 -> 장고 -> 응답

장고 내부 = 2~6번 과정

정리
    Django는 MTV 디자인 패턴을 가지고 있음
    MODEL : 데이터 관련
    TEMPLATE : 화면 관련
    VIEW : MODEL & TEMPLATE 중간 처리 및 응답 반환


Django ==> 매 프로젝트마다 개발환경 분리

설치 전 가상 환경 설정 및 활성화를 마치고 진행

가상환경 : 개발환경을 분리하기 위해 사용

Django 4.0 릴리즈로 인해 3.2(LTS) 
    * LTS = LongTurm Support 버전


가상환경 실행법
-> 노션 공용문서 참고
    python -m venv venv
    source venv/Scripts/activate

    pip install django==3.2

    pip freeze > requirements.txt

    .gitignore
    --> gitignore.io 에서 python, visual studio code, django ==> 복사 

    django-admin startproject firstpjt.

Python manage.py runserver

생성된 config 폴더 == 프로젝트 폴더
최상위 폴더 == 전체 폴더

폴더 구조

    __inint__.py : python에게 이 디렉토리를 하나의 python 패키지로 다루도록 지시
                   별도의 추가 코드를 작성하지 않음
    
    asgi.py : Asynchronous Server Gateway Interface
              Django 애플리케이션이 비동기식 웹서버와 연결 및 소통하는 것을 도움
              추후 배포시에 사용.
              지금은 수정 x

    settings.py : Django 프로젝트 설정을 관리 (*)

    urls.py : 사이트의 url과 적절한 views의 연결을 지정 (*)
              사용자의 url을 판단하는 곳
    
    wsgi.py : Web Server Gateway Interface
              Django 애플리케이션이 웹서버와 연결 및 소통하는 것을 도움
              추후 배포 시에 사용
              지금은 수정 x
    
manage.py Django 프로젝트와 다양한 방법으로 상호작용하는 커맨드라인 유틸리티

djvmfflzpdltus rnwh
    admin.py : 관리자용 페이지를 설정하는 곳
    apps.py : 앱의 정보가 작성된 곳
              별도로 추가 코드를 작성하지 않음
    models.py : 어플리케이션에서 사용되는 model을 정의하는 곳
                MTV 패턴의 M에 해당
    tests.py : 프로젝트의 테스트 코드를 작성하는 곳   
    views.py : view 함수들이 정의되는 곳
               MTV 패턴의 V에 해당 
               MTV 패턴, C에 해당

애플리케이션 등록
    프로젝트에서 앱을 사용하기 위해서는
    반드시 INSTALLED_APPS 리스트에
    반드시 추가해야 함.

    INSTALLED_APPS
        Django installation에 활성화된
        모든 앱을 지정하는 문자열 등록

    *반드시 생성 후 등록
        INSTALLED_APPS에 등록하고 생성하려면 앱이 생성되지 않음

요청과 응답

    URL -> VIEW -> TEMPLATE 순서로 수정

    # 사용자가 index라는 주소로 요청을 보낸다면 
    # articles 에 있는 views 파일에서 index 함수 실행
    path('index/', views.index)
    # 이때 함수는 호출하지 않고 함수명만 작성
    #path('페이지 이름', 실행하는 컨트롤러 함수 )

    #파이썬은 1급 객체이다.
    # 1. 함수를 변수에 저장할 수 있다.
    # 2. 함ㅅ를 리턴으로 전달할 수 있다.
    # 3. 함수를 인자로 전달할 수 있다.

render 함수
