TEMPLATE
    Django template 을 이용한 HTML 정적 부분과 동적 컨텐츠 삽입
    Template system의 기본 목표를 숙지

Django Template system
    데이터 표현을 제어하는 도구이자 표현에 관련된 로직을 담당

조건, 반복, 변수 치환, 필터 등의 기능을 제공
    -> python처럼 일부 프로그래밍 구조(if, for 등)을 사용할 수 있지만 
        이것은 Python 코드로 실행되는 것이 아님.

    Django 템플릿 시스템은 단순히 python이 HTML에 포함된 것이 아니니 주의

    프로그래밍적 로직이 아니라 프레젠테이션을 표현하기 위한 것임을 명심

Variable
    변수명은 영어, 숫자와 밑줄(_)의 조합으로 구성될 수 있으나 밑줄로는 시작할수 없음
    공백이나 구두점 문자 또한 사용할 수 없음

    dot(.) 을 이용하여 변수 속성에 접근 가능

    render()의 세번째 인자로 {'key' : value} 와 같이 딕셔너리 형태로 넘겨주며,
    여기서 정의한 key에 해당ㅎ는 문자열이 template에서 사용 가능한 변수명이 됨


Filters
    {{varialbe | filter}}
    표시할 변수를 수정할 떄 사용
    ex)
        name 변수를 모두 소문자로 출력 : {{name|lower}}
    
    60개의 built-in template filters 를 제공
    chained가 가능하며 일부 필터는 인자를 받기도 함.

Tags
    출력 테스트를 만들거나, 반복 또는 논리를 수행하여 제어 흐름을 만드는 등
    변수보다 복잡한 일들을 수행

    일부 태그는 시작과 종료 태그가 필요
    {% if %}{% endif %}
    --> if. for문처럼 들여쓰기 해야하는 경우 %을 사용하는 경우가 많음

    약 24개의 built-in template tags 제공

Comments
    {# #}
    Django template에서 라인의 주석을 표현하기 위해 사용
    유효하지 않은 템플릿코드가 포함될 수 있음

    한줄 주석에만 사용할 수 있음 (줄 바꿈이 허용되지 않음)

    여러 줄 주석은 {%Comment%} 와 {%endcomment%} 사이에 입력
    
    {% comment %}
        여러줄
        주석
    {% endcomment %}

Template 상속
    템플릿 상속에 관련된 태그
    {% extends '' %}
    
    자식(하위) 템플릿이 부모 템플릿을 확장한다는 것을 알림
    반드시 템플릿 최상단에 작성되어야 함 (즉, 2개 이상 사용할 수 없음)

    {% block content %}
    원하는 내용~~~
    {% endblock content %}

    --> block으로 묶은 부분은 

setting -> template -> dirs == BASE_DIR (전체폴더를 의미)

HTML <form> element
    데이터가 전송되는 방법을 정의
    웹에서 사용자 정보를 입력하는 여러 방식 (text, button, submit 등) 을 제공하고,
    사용자로부터 할당된 데이터를 서버로 전송하는 역할을 담당

    데이터를 어디(action)로 어떤 방식(method)으로 보낼지

    핵심 속성 
        action
        method
    

    ?q= AAA & oq = AAA 