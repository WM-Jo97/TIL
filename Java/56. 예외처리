프로그램에서의 오류
    컴파일 오류 (compile error)
        프로그램 코드 작성 중 발생하는 문법적 오류
        최근에는 개발 환경(eclipse)에서 대부분의 컴파일 오류는 detection 됨

    실행 오류 (runtime error)
        실행중인 프로그램이 의도하지 않은 동작(bug)을 하거나 프로그램이 중지되는 오류
        실행 오류는 비정상 종료가 되는 경우 시스템의 심각한 장애기 발생할 수 있음

예외처리의 중요성
    프로그램의 비정상 종료를 피하여 시스템이 원활이 실행되도록 함
    실행 오류가 발생한 경우 오류의 과정을 재현하는 것은 현실적으로 힘들다
    오류가 발생한 경우 log를 남겨서 추후 log 분석을 통해 그 원인을 파악하고 bug를 수정하는 것이 중요

오류와 예외 클래스
    시스템 오류(error) : 가상 머신에서 발생, 프로그래머가  처리할 수 없는 오류
                         동적 메모리가 없는 경우, 스택 메모리 오버플로우 등
    예외 (Exception) : 프로그램에서 제어할 수 있는 오류
                       읽어들이려는 파일이 존재하지 않거나, 네트워크나 DB연결이 안되는 경우 등
    자바는 안전성이 중요한 언어로 대부분 프로그램에서 발생하는 오류에 대해 문법적으로 예외처리를 해야함

예외 클래스들
    모든 예외 클래스의 최상위 클래스는 Exception 클래스
    
    자바에서는 다양한 예외들에 대해 그 처리를 위한 클래스가 제공되고 있음
        Arithmetic Exception : 정수를 0으로 나눈 경우 발생
        NullPointerException : 초기화되지 않은 Object를 사용하는 경우
        ArrayIndexOutOfBoundsException : 배열의 크기를 넘어선 위치를 참조하려는 경우 등


Try - Catch 문
    try 블록에는 예외가 발생할 가능성이 있는 코드를 작성하고 try 블록 안에서 예외가 발생하면 catch 블록이 수행

Try-Catch-Finally 문
    finally 블럭에서 파일을 닫거나 네트웍을 닫는 등의 리소스 해제 구현을 함
    try{} 블럭이 수행되는 경우, finally{} 블럭은 항상 수행됨
    여러 개의 예외 블럭이 있는 경우 각각에서 리소스를 해제하지 않고 finally 블록에서 해제하도록 구현
    컴파일러에 의해 예외가 처리되는 예 (파일 에러 처리)

Try-with-resources문
    리소스를 사용하는 경우 close()하지 않아도 자동으로 해제되도록 함
    자바 7부터 제공되는 구문
    리소스를 try() 내부에서 선언해야 함
    close()를 명시적으로 호출하지 않아도 try{} 블록에서 열린 리소스는 정상적인 경우나 예외가 발생한 경우 모두  자동으로 해제됨
    해당 리소스 클래스가 AutoCloseable 인터페이스를 구현 해야함
    FileInputStream의 경우에는 AutoCloseable을 구현하고 있음
    자바 9부터는 리소스는 try() 외부에서 선언하고 변수만을 try(obj)와 같이 사용할 수 있음
