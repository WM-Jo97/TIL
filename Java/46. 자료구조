자료 구조란
    프로그램에서 사용할 많은 데이터를 메모르 상에서 관리하는 여러 구현방법들
    효율적인 자료 구조가 성능 좋은 알고리즘의 기반이 됨
    자료의 효율적인 관리는 프로그램의 수행속도와 밀접한 관련이 있음
    여러 자료 구조 중에서 구현하려는 프로그램에 맞는 최적의 자료구조를 활용해야 하므로 자료구조에 대한 이해가 중요

자료구조의 종류
    선형 자료구조
        배열 (Array) : 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 자료의 물리적 위치와 논리적 위치가 같음
        연결 리스트 (LinkedList) : 선형으로 자료를 관리, 자료가 추가될 때마다 메모리를 할당받고, 자료는 링크로 연결됨
                                   자료는 링크로 연결됨. 자료의 물리적 위치와 논리적 위치가 다를 수 있음
        스택 : 가장 먼저 입력된 자료가 가장 먼저 출력되는 선입선출의 구조
        큐 : 가장 나중에 입력된 자료가 가장 나중에 출력되는 후입선출의 구조 

    비선형 자료구조
        트리(Tree) : 부모 노드와 자식 노드간의 연결로 이루어진 자료 구조
        힙(heap) : Priority queue 를 구현(우선순위 큐)
            Max heap : 부모 노드는 자식 노드보다 항상 크거나 같은 값을 갖는 경우
            Min heap : 부모 노드는 자식 노드보다 항상 작거나 같은 값을 갖는 경우
        이진 트리(Binary tree) : 부모노드에 자식 노드가 두개 이하인 트리
        이진 검색트리(Binary search tree)
            자료(key)의 중복을 허용하지 않음
            왼쪽 자식 노드는 부모 노드보다 작은 값, 오른쪽 자식 노드는 부모 노드보다 큰 값을 가짐
            자료를 검색에 걸리는 시간이 평균 log(n)
            inorder travarsal 탐색을 하게 되면 자료가 정렬되어 출력됨
        
        해싱(Hashing) : 자료를 검색하기 위한 자료 구조
            검색을 위한 자료 구조
            키(key)에 대한 자료를 검색하기 위한 사전(dictionary) 개념의 자료 구조
            key는 유일하고 이에 대한 value를 쌍으로 저장
            index = h(key) : 해시 함수가 key에 대한 인덱스를 반환해줌, 해당 인덱스 위치에 자료를 저장하거나 검색하게 됨
            해시 함수에 의해 인덱스 연산이 산술적으로 가능 O(1)
            저장되는 메모리 구조를 해시 테이블이라 함
            JDK 클래스 : HashMap, Properties

            => 파이썬의 경우 dictionary 의 형태와 동일함

        